//
// Export to...
//
// dzslides without embedded assets:
// asciidoc slides.asciidoc
//
// dzslides with embedded assets:
// asciidoc -a data-uri -a linkcss! slides.asciidoc
//
// HTML5:
// asciidoc -b html5 -o outline.html slides.asciidoc
//
*WebSocket* The Current State of the Most Valuable HTML5 API
==============================================================
Viktor Gamov <viktor.gamov@faratasystems.com>
v0.1, Feb 24, 2013
:title: WebSocket: The Current State of the Most Valuable HTML5 API
:description: Slides for presentation about WebSocket HTML5 API.
:copyright: CC BY-SA 2.0
:website: http://faratasystems.com
:author_title: Sr. Software Engineer
:corpname: Farata Systems
:imagesdir: images
:backend: dzslides
:linkcss: true
:dzslides-style: tomorrow
:dzslides-transition: horizontal-slide
:dzslides-fonts: family=Yanone+Kaffeesatz:400,700,200,300&family=Cedarville+Cursive
:dzslides-highlight: github
:dzslides-aspect: 4-3
// disable syntax highlighting unless turned on explicitly
:syntax: no-highlight

[{topic}]
== What you should expect to learn today

image::twowaytraffic.jpg[role="middle stretch-y"]

[{topic}]
== What I will tell you today

[role="incremental"]
- Demo 
- What went over the wire
- How Server-Side Events would do this
- How the legacy HTTP would do this
- Meet WebSocket
- What's one the server
- How about proxies
- A word about security

[{topic}]
== Demo: Server-Side Push with WebSockets

[{stepwise}]
* The cast:
** Server [detail]#Oracle GlassFish 4#
** Client [detail]#HTML/JavaScript/Ext JS framework#
** Browser [detail]#Google Chrome#
* The plot:
** client and server use two WebScocket connections and start 
** Pushing market data quotes [detail]#(10 per second). Portfolio size: 50 stocks#
** Pushing Order execution notifications

// TODO: Add an image of the architecture of the demo

==  \\

[{statement}]
*Demo*

[{topic}]
==  Counting overhead

Every data push had:

* Payload size: 
** Market data: from 23 to 25 bytes
** Order notification: 30 bytes 
* WebSocket overhead: 2 bytes in each case

// TODO: Add a sample JSON string for market data and for order execution   

[{topic}]
==  What's HTML5 WebSocket

image::html5_connectivity.png[role="pull-right"]

[{stepwise}]
- It's HTML5 standard API
- It's a full duplex protocol
- Starts as a handshake via open ports 80 and 443
- Upgrades the protocol from HTTP to Websockets
- From this point no more HTTP

//image::HTML5_Connectivity_512.png[role="middle", scaleheight=50%, scaleweight=50%] 

[{recap-final}]
== “LEGACY” WEB

[{stepwise}]
- Polling
- Long Polling
- Streaming

== \\

*Polling*

image::fig_09_01.png[role="middle"]

//NOTE: Browser sends HTTP requests at regular intervals and immediately receives a response. However, real- time data is often not that predictable, making unnecessary requests inevitable and as a result, many connections are opened and closed needlessly in low-message-rate situations

== \\

*Long Polling*

image::fig_09_02.png[role="middle"]

//NOTE: Browser sends a request to the server and the server keeps the request open for a set period of time. If a notification is received within that period, a response containing the message is sent to the client. If a notification is not received within the set time period, the server sends a response to terminate the open request.


== \\

*Streaming*

image::fig_09_03.png[role="middle"]

[{topic}]
== Demo of HTTP Request-Response

[{stepwise}]
* Make one HTTP request to the same server (market data)
* Analyze HTTP overhead using Google Developer Tools

[{topic}]
== Server-Side Events

[{statement}]
What are SSE?

[{topic}]
== Demo of the Data Push with SSE

[{stepwise}]
- The same server pushes market data using SSE 
- Analyze SSE overhead using Google Developer Tools

[{topic}]
== Comparing Overhead: HTTP vs SSE vs WebSocket

On the top of the data load: 

[{stepwise}]
* HTTP added *478 bytes* 
* SSE added *236 bytes* 
* WebSocket added *2 bytes*

== ||

[quote, www.ietf.org/mail-archive/web/hybi/current/msg00784.html]
____
Reducing kilobytes of data to 2 bytes... and reducing latency from 150ms to 50 ms is far more than marginal. In fact, these two factors alone are enough to make WebSocket seriously interesting...
____

[{topic}]
== Meet the *WEB SOCKET*

[{stepwise-alt}]
* STANDARD PROTOCOL [detail]#Websocket is a standardized technology (described in RFC6455) to support low‐overhead bidirectional traffic from your Web browser.#
* CLIENT-SIDE API [detail]#HTML5 specification introduces WebSocket client side object. No plugin required#
* SERVER-SIDE API [detail]#True real-time server updates. Expected large penetration in Java world with upcoming JavaEE 7 spec and JSR-356#


//[role="topic source lhs"]
[{topic}]
== WebSocket JavaScript API

[syntax="javascript"]
----------------------------------------------------------------------
var ws;
if (window.WebSocket) {
    output("WebSocket supported in your browser");
    ws = new WebSocket("ws://www.websockets.org");

    // Set event handlers.
    ws.onopen = function () {
        output("onopen");
    };
    ws.onmessage = function (e) {
        // e.data contains received string.
        output("echo from server : " + e.data);
    };
    ws.onclose = function () {
        output("onclose");
    };
    ws.onerror = function () {
        output("onerror");
    };

}
else {output("WebSocket not supported in your browser");}
----------------------------------------------------------------------

//[{intro}]
//== *Side* by{nbsp}**side**

[role="topic"]
== WebSocket handshake
To Start full-duplex communication client should send UPGRADE request

[{stepwise-alt}]
- SEND +UPGRADE+ REQUEST
- RECEIVE +UPGRADE+ RESPONSE
- CHANGE +READYSTATE+ TO `open`
- LISTEN `message` EVENT

[{recap-final}]
== USE CASE

WebSockets really shine with following applications:

[role="incremental scatter"]
- Live trading/sports ticker
- Controlling medical equipment over the web
- Chat applications
- Multiplayer online games
- Realtime updating social streams

[{topic}]
== Proxies and WebSockets

We use http://nginx.com/[NGINX] as:

* load balancer between Java server
* a proxy server to serve images and text files
* SSL offloader (HTTPS to HTTP conversion). 

Recently NGINX started supporting WebSockets protocol.

[{topic}]
== Useful links

* http://enterprisewebbook.com/[Enterprise Web Development book]
* http://www.w3.org/TR/websockets/ 
* http://tools.ietf.org/html/rfc6455 

[{topic}]
== Upcoming book from *O'Reilly*

image::cover.png[role='middle']

[{ending}, hrole="name"]
== Thank you!

[role="footer"]
http://enterprisewebbook.com