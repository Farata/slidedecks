//
// Export to...
//
// dzslides without embedded assets:
// asciidoc slides.asciidoc
//
// dzslides with embedded assets:
// asciidoc -a data-uri -a linkcss! slides.asciidoc
//
// HTML5:
// asciidoc -b html5 -o outline.html slides.asciidoc
//
*WebSocket* The Current State of the Most Valuable HTML5 API
==============================================================
Viktor Gamov <viktor.gamov@faratasystems.com>
v0.1, Feb 24, 2013
:title: WebSocket: The Current State of the Most Valuable HTML5 API
:description: Slides for presentation about WebSocket HTML5 API.
:copyright: CC BY-SA 2.0
:website: http://faratasystems.com
:author_title: Sr. Software Engineer
:corpname: Farata Systems
:imagesdir: images
:backend: dzslides
:linkcss: true
:dzslides-style: tomorrow
:dzslides-transition: horizontal-slide
:dzslides-fonts: family=Yanone+Kaffeesatz:400,700,200,300&family=Cedarville+Cursive
:dzslides-highlight: github
:dzslides-aspect: 4-3
// disable syntax highlighting unless turned on explicitly
:syntax: no-highlight

[{topic}]
== Farata Systems - The Expert Consultancy

image::farata.png[role="middle stretch-y"]

[{topic}]
== All cool technologies in one picture

image::twowaytraffic.jpg[role="middle stretch-y"]

[{topic}]
== What you should expect to experience today

[role="incremental"]
- Demo
- Meet *WebSocket*
- What went over the wire
- How *Server-Sent Events* would do this
- How the legacy HTTP would do this
- Demystifying WebSockets

== \\

[{statement}]
*Demo*

// == \\
//
//image::nothing_to_do_here.jpg[role="middle"]

[{topic}]
== Demo: Server-Side Push with WebSockets

[{stepwise}]
* The cast (my personal preferences) :
** Server [detail]#Oracle GlassFish 4#
** Client [detail]#HTML/JavaScript/Ext JS framework#
** Browser [detail]#Google Chrome Canary#
* The plot:
** Pushing market data quotes [detail]#20 per second. Stock portfolio size: 12 stocks#

// ** compare with SSE traffic 
// ** client and server use two WebScocket connections and start 
// ** Pushing Order execution notifications
// TODO: Add an image of the architecture of the demo

==  \\

[{statement}]
*Demo*

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<!--
<iframe width=100% height=100% seamless src="http://localhost:8080/html5devconf_demo/"></iframe>
-->
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[{topic}]
== What just happened?

Every data push had:

* Payload size: 
** Market data: from *42* to *45* bytes
* WebSocket overhead: *2* bytes in each case + overhead of HTTP headers on initial handshake

// TODO: Add a sample JSON string for market data and for order execution   

[source,javascript]
----------------------------------------------------------------------
{"symbol": "APPL", "id": 555, "price": "451.29"}
----------------------------------------------------------------------

== ||

[quote, Ian Hickson (Google), www.ietf.org/mail-archive/web/hybi/current/msg00784.html]
____
Reducing kilobytes of data to 2 bytes... and reducing latency from 150ms to 50 ms is far more than marginal. In fact, these two factors alone are enough to make WebSocket seriously interesting...
____

[{topic}]
== Meet the *WEB SOCKET*

image::html5_connectivity.png[role="pull-right"]

[{stepwise}]
* STANDARD PROTOCOL [detail]#It's a standardized technology (RFC6455).#
* CLIENT-SIDE API [detail]#New +window.WebSocket+ object. No plugin required#
* SERVER-SIDE API [detail]#Check your favorite language for WebSocket server support#

== \\

[{statement}]
*Handshake*

[{topic}]
== Client and Server must to negotiate in known form

image::approve.gif[role="middle"]

[role="topic"]
== WebSocket handshake
Here is sequence of the steps of initial handshake

[{stepwise}]
- Client sends +UPGRADE+ HTTP-request 
- Server confirms +UPGRADE+
- Client receives +UPGRADE+ response
- Client changes +readyState+ property of WebSocket object to `open`

//[role="topic source lhs"]
[{topic}]
== WebSocket JavaScript API

[syntax="javascript"]
----------------------------------------------------------------------
var ws;
if (window.WebSocket) {
    console.log("WebSocket supported in your browser");
    ws = new WebSocket("ws://echo.websocket.org");
    // Set event handlers.
    ws.onopen = function () {
        console.log("onopen");
    };
    ws.onmessage = function (e) {
        // e.data contains received string.
        console.log("echo from server : " + e.data);
    };
    ws.onclose = function () {
        console.log("onclose");
    };
    ws.onerror = function () {
        console.log("onerror");
    };
}
else {console.log("WebSocket not supported in your browser");}
if (ws.readyState === 1){ ws.send("Hello WebSocket!"); }
----------------------------------------------------------------------

[{topic}]
== Server-Sent Events

[{statement}]
What are *SSE*?

[{topic}]
== Demo of the Data Push with SSE

[{statement}]
*Demo*

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<!--
<iframe width=100% height=100% seamless src="http://localhost:8080/html5devconf_demo/"></iframe>
-->
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//[{stepwise-alt}]
//- The same server pushes market data using SSE 
//- Analyze SSE overhead using Google Developer Tools

[{recap-final}]
== “LEGACY” WEB

[{stepwise}]
- Polling
- Long Polling
- Streaming

== \\

*Polling*

image::fig_09_01.png[role="middle"]

//NOTE: Browser sends HTTP requests at regular intervals and immediately receives a response. However, real- time data is often not that predictable, making unnecessary requests inevitable and as a result, many connections are opened and closed needlessly in low-message-rate situations

== \\

*Long Polling*

image::fig_09_02.png[role="middle"]

//NOTE: Browser sends a request to the server and the server keeps the request open for a set period of time. If a notification is received within that period, a response containing the message is sent to the client. If a notification is not received within the set time period, the server sends a response to terminate the open request.


== \\

*Streaming*

image::fig_09_03.png[role="middle"]

[{topic}]
== Demo of HTTP Request-Response

[{statement}]
*Demo*

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<!--
<iframe width=100% height=100% seamless src="http://localhost:8080/html5devconf_demo/"></iframe>
-->
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//[{statement}]
//*Demo*

//[{stepwise}]
//* Make one HTTP request to the same server (market data)
//* Analyze HTTP overhead using Google Developer Tools

[{topic}]
== Comparing Overhead: HTTP vs SSE vs WebSocket

//On the top of the data load: 

[{stepwise}]
* HTTP added *429 bytes* request and *268 bytes* response headers
** response *46* bytes
* SSE added *406 bytes* request and *227 bytes* response headers
** plus *8 bytes* message wrapper
* WebSocket added to Upgrade request *87 bytes* (header) and *442 bytes* (body)
** added *2 bytes* for each client-to-server message

[{recap-final}]
== or delusion?

WebSocket: Known Facts

[{stepwise}]
* WS doesn't work with proxies
* Poor support of browsers
* WebSockets only for browsers
* WebSocket not easy hide behind load balancer
* How to keep connection alive

[{topic}]
== WebSocket and Proxies

image::the-internet-a-series-of-tubes.jpg[role="middle"]

== \\

[{statement}]
_tl; dr_ Note sure about proxies - use *TLS/SSL*

[{topic}]
== Masked Frames

[{statement}]
image::masked.jpg[role="middle"]

[{topic}]
== My browser has it!

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<iframe width=100% height=100% seamless src="http://caniuse.com/websockets/embed/"></iframe>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

[{topic}]
== Is WebSocket only for browser?

image::everythere.jpg[role="middle"]

[{recap-final}]
== Frameworks, please?

Clients:

[{stepwise}]
* JAVA:
** https://github.com/AsyncHttpClient/async-http-client[AsyncHTTP Client]
** http://autobahn.ws/android[AutobahnAndroid]
* iOS:
** https://github.com/square/SocketRocket[the SocketRocket]

[{recap-final}]
== Frameworks, please?

Server:

* Python
** http://www.tornadoweb.org/en/stable/websocket.html[Tornado]
* Php 
** https://github.com/nicokaiser/php-websocket[Wrench]
* JavaScript (Node)
** http://einaros.github.com/ws/[WS]
** http://socket.io/[Socket.IO]

[{recap-final}]
== Frameworks, please?

vert.x to rule them all:

[{stepwise}]
* JVM-based runtime
* simple
* scalable
* several programming languages in a single app [detail]#JavaScript, CoffeeScript, Ruby, Python, Groovy or Java#

[{topic}]
== Load Balancing

We use http://nginx.com/[NGINX] as:

* load balancer between Java server
* a proxy server to serve images and text files
* SSL offloader (HTTPS to HTTP conversion). 

Recently NGINX team added WebSockets protocol support

[{topic}]
== Ping-Pong frames: Keeping connection alive

image::ping_pong.gif[role="middle"]

[{recap-final}]
== USE CASE

WebSockets really shine with following applications:

[role="incremental scatter"]
- Live trading/sports ticker
- Controlling medical equipment over the web
- Chat applications
- Multiplayer online games
- Real-time updating social streams
- Tools protocols (LiveReload)

== \\

image::not_sure.jpg[role="middle stretch-y"]

[{recap-final}]
== What to use anyway?

[{stepwise-alt}]
* WebSockets [detail]#if you need bidirectional communication# 
* Server-Sent Events [detail]#just for server side push#
* Long-polling [detail]#for fallback and emulation#

[{topic}]
== Upcoming book from *O'Reilly*

image::cover.png[role='middle']

[{topic}]
== Useful links

* http://enterprisewebbook.com/[Enterprise Web Development book]
* http://www.apress.com/9781430247401[The Definitive Guide to HTML5 WebSocket]
* http://www.w3.org/TR/websockets/ 
* http://tools.ietf.org/html/rfc6455 
* http://www.w3.org/TR/eventsource/

[{ending}, hrole="name"]
== Thank you!

[role="footer"]
http://enterprisewebbook.com